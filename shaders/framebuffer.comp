#version 460 core
#extension GL_NV_gpu_shader5 : require
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(rgba16f, binding = 0) restrict uniform image2D screen;

// Uniform variables
layout(binding = 1) uniform sampler2D u_cubemap;
layout(binding = 2) uniform sampler2DArray u_textures;
layout(location = 0) uniform uvec3 u_frame_data; // seed, frame#, num_bounces

layout (std140, binding = 3) uniform Camera
{
	vec4 cam_origin;
	vec4 cam_forward;
	vec4 cam_right;
};

// Math constants
#define EPSILON 		0.00001
#define PI 				3.14159265
#define TWO_PI  		6.28318530
#define HALF_PI 		1.57079632

// Ray constants
#define TMIN            float16_t(0.00001)
#define TMAX            float16_t(10000.0)
#define NUM_SHADOW_RAYS 1

// Misc
#define ENVIRONMENT_MAP_LE 				0.05
#define IMPORTANCE_SAMPLE_GGX 			1
#define NEE_SPECULAR_ROUGHNESS_CUTOFF 	0.0
#define NORMAL_OFFSET					0.005

// SSBO helper structs

struct Triangle
{
	vec4 data1;  // v0.x, v0.y, v0.z, uv0
	vec4 data2;  // v1.x, v1.y, v1.z, uv1
	vec4 data3;  // v2.x, v2.y, v2.z, uv2
	uvec4 data4; // n0_oct, n1_oct, n2_oct, mat_index
};

struct Sphere
{
	vec4 sphere_data; // o.x, o.y, o.z, radius
	uvec4 mat_index;
};

struct Material
{
	vec4 data1; // diff.x, diff.y, diff.z, roughness
	vec4 data2; // spec.x, spec.y, spec.z, mat_type
	vec4 data3; // Le.x, Le.y, Le.z, diffuse_tex_index
};

struct BVHNode
{
	vec4 data1; // bmin.x, bmin.y, bmin.z, left/first_tri
	vec4 data2; // bmax.x, bmax.y, bmax.z, num_tris
};

// SSBOs

layout(std430, binding = 0) readonly restrict buffer SpheresSSBO
{
	Sphere spheres[];
};

layout(std430, binding = 1) readonly restrict buffer ModelTrisSSBO
{
	Triangle triangles[];
};

layout(std430, binding = 2) readonly restrict buffer ModelLightTrisSSBO
{
	uint light_tri_indices[];
};

layout(std430, binding = 3) readonly restrict buffer MaterialsSSBO
{
	Material materials[];
};

layout(std430, binding = 4) readonly restrict buffer BVHSSBO
{
	BVHNode bvh_nodes[];
};

layout(std430, binding = 5) readonly restrict buffer LightSpheresSSBO
{
	uint light_sphere_indices[];
};

// Randomness
// Great thank you to markjarzynski on Shadertoy
// for their excellent resource on GPU Hash
// functions, created alongside their research.
// https://www.shadertoy.com/view/XlGcRh

uint seed3(in uvec3 p) 
{
    return 19u * p.x + 47u * p.y + 101u * p.z + 131u;
}

float hash_to_float(in uint hash)
{
	// hash * (1 / MAX_UINT)
	return float(hash) / float(0xfffffff0u);
}

uint pcg(inout uint rng_state)
{
	uint state = rng_state;
	rng_state = rng_state * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}

// Make sure to generate a value in (0,1) rather than [0,1]
float rand(inout uint rng_state)
{
	return max(EPSILON, min(1.0 - EPSILON, hash_to_float(pcg(rng_state))));
}

vec2 rand_vec2(inout uint rng_state)
{
	return vec2(rand(rng_state), rand(rng_state));
}

mat3 construct_tnb(in vec3 n)
{
	// Orthonormal basis
	float s = n.z < 0.0 ? -1.0 : 1.0;
	float a = -1.0 / (s + n.z);
	float b = n.x * n.y * a;

	vec3 t = vec3(1.0 + s * n.x * n.x * a, s * b, -s * n.x);
	vec3 bt = vec3(b, s + n.y * n.y * a, -n.y);

	return mat3(t, n, bt);
}

vec3 map_to_unit_sphere(in vec2 vec)
{
	// First we map [0,1] to [0,2] and subtract one to map
	// that to [-1, 1], which is the range of cosine.
	float cos_theta = 2.0 * vec.x - 1.0;

	// We can directly map phi to [0, 2PI] from [0, 1] by just
	// multiplying it with 2PI
	float phi = TWO_PI * vec.y;

	// sin^2(x) = 1 - cos^2(x)
	// sin(x) = sqrt(1 - cos^2(x))
	float sin_theta = sqrt(1.0 - cos_theta * cos_theta);

	// Just a conversion between spherical and Cartesian coordinates
	return vec3(sin_theta * cos(phi), cos_theta, sin_theta * sin(phi));
}

vec3 map_to_unit_hemisphere_cosine_weighted_criver(in vec2 uv, in vec3 normal)
{
	return normalize(map_to_unit_sphere(uv) + normal);
}

// NOTE: Assumes normalized vector "vec" in a hemisphere.
// This results in a theta value in the range [0, PI],
// and a phi value in the range [0, 2PI].
void cartesian_to_spherical(in vec3 vec, out float theta, out float phi)
{
	theta = acos(vec.y);
	phi = atan(vec.x, vec.z) + PI;
}

vec3 sky_color(vec3 dir)
{
	vec2 cubemap_size = textureSize(u_cubemap, 0);

	float theta, phi;
	cartesian_to_spherical(dir, theta, phi);

	phi += PI / 8.0;
	if(phi < 0.0)
		phi += TWO_PI;
	if(phi > TWO_PI)
		phi -= TWO_PI;

	vec3 cubemap_color = texture(u_cubemap, vec2(phi / TWO_PI, theta / PI)).rgb;
	return cubemap_color;
}

f16vec3 octahedral_normal_decoding(f16vec2 f)
{
	f16vec3 n = f16vec3(f.xy, 1.0 - abs(f.x) - abs(f.y));
	float16_t t = max(-n.z, 0.0);
	n.x += n.x >= 0.0 ? -t : t;
	n.y += n.y >= 0.0 ? -t : t;
	return normalize(n);
}

// Structs

struct HitData
{
	float16_t t;
	f16vec3 normal;
	uint mat_index;
	uint object_index;
	uint8_t object_type; // 0 tri, 1 sphere
	f16vec2 uvs;
};

// Intersection

float intersect_sphere(vec3 ro, vec3 rd, Sphere sphere)
{
	vec3 oc = ro - sphere.sphere_data.xyz;
	float a = dot(rd, rd);
	float b = 2.0 * dot(oc, rd);
	float c = dot(oc, oc) - sphere.sphere_data.w * sphere.sphere_data.w;
	float discriminant = b * b - 4.0 * a * c;
	if(discriminant >= 0)
	{
		if(discriminant <= EPSILON)
		{
			float t = -b / (2.0 * a);
			if(t >= TMIN && t <= TMAX)
			{
				return t;
			}
		}
		else
		{
			float sqrt_discriminant = sqrt(discriminant);
			float t1 = (-b + sqrt_discriminant) / (2.0 * a);
			float t2 = (-b - sqrt_discriminant) / (2.0 * a);
			if(t1 > t2)
			{
				float tmp = t1;
				t1 = t2;
				t2 = tmp;
			}

			if(t1 >= TMIN && t1 <= TMAX)
			{
				return t1;
			}

			if (t2 >= TMIN && t2 <= TMAX)
			{
				return t2;
			}
		}
	}

	return -1.0;
}

// Mollerâ€“Trumbore ray-triangle intersection algorithm
bool intersect_triangle(vec3 ro, vec3 rd, uint tri_index, inout HitData data, in float tmax)
{
	Triangle tri = triangles[tri_index];
	vec3 edge1 = tri.data2.xyz - tri.data1.xyz;
	vec3 edge2 = tri.data3.xyz - tri.data1.xyz;
	vec3 pvec = cross(rd, edge2);
	float dt = dot(edge1, pvec);

	// Ray direction parallel to the triangle plane

	float inv_determinant = 1.0 / dt;
	vec3 tvec = ro - tri.data1.xyz;
	float u = dot(tvec, pvec) * inv_determinant;
	if (abs(dt) < EPSILON || (u < 0.0) || (u > 1.0))
		return false;

	vec3 qvec = cross(tvec, edge1);
	float v = inv_determinant * dot(rd, qvec);

	// Computing t
	float t = inv_determinant * dot(edge2, qvec);
	if ((v >= 0.0) && (u + v <= 1.0) && t > TMIN && t < tmax)
	{
		f16vec3 n0 = octahedral_normal_decoding(unpackFloat2x16(tri.data4.x));
		f16vec3 n1 = octahedral_normal_decoding(unpackFloat2x16(tri.data4.y));
		f16vec3 n2 = octahedral_normal_decoding(unpackFloat2x16(tri.data4.z));

		data.t = float16_t(t);
		data.mat_index = tri.data4.w;
		data.object_index = tri_index;
		data.object_type = uint8_t(0);

		float16_t w = float16_t(1.0 - u - v);
		data.uvs = 			  w * unpackFloat2x16(uint(tri.data1.w)) +
				   float16_t(u) * unpackFloat2x16(uint(tri.data2.w)) +
		           float16_t(v) * unpackFloat2x16(uint(tri.data3.w));

//		vec3 n0 = tri.data5.xyz;
//		vec3 n1 = vec3(tri.data5.w, tri.data6.xy);
//		vec3 n2 = vec3(tri.data6.zw, tri.data7.x);
		data.normal = f16vec3(normalize(w * n0 + u * n1 + v * n2));
		data.normal *= float16_t(-sign(dot(data.normal, rd)));

		return true;
	}

	return false;
}

// Slab method
// https://tavianator.com/2011/ray_box.html
f16vec2 intersect_aabb(in f16vec3 ro, in f16vec3 rd, in f16vec3 bmin, in f16vec3 bmax, in float16_t t)
{
	f16vec3 inv_dir = float16_t(1.0) / rd;
	float16_t tx1 = bmin.x * inv_dir.x - ro.x * inv_dir.x;
	float16_t tx2 = bmax.x * inv_dir.x - ro.x * inv_dir.x;
	float16_t tmin = min(tx1, tx2);
	float16_t tmax = max(tx1, tx2);

	float16_t ty1 = bmin.y * inv_dir.y - ro.y * inv_dir.y;
	float16_t ty2 = bmax.y * inv_dir.y - ro.y * inv_dir.y;

	tmin = max(tmin, min(ty1, ty2));
	tmax = min(tmax, max(ty1, ty2));

	float16_t tz1 = bmin.z * inv_dir.z - ro.z * inv_dir.z;
	float16_t tz2 = bmax.z * inv_dir.z - ro.z * inv_dir.z;

	tmin = max(tmin, min(tz1, tz2));
	tmax = min(tmax, max(tz1, tz2));

	return f16vec2(tmin, tmax);
}

f16vec3 get_bmax(in BVHNode node)
{
    return f16vec3(node.data2.xyz);
}

f16vec3 get_bmin(in BVHNode node)
{
    return f16vec3(node.data1.xyz);
}

bool intersect_bvh_stack(in f16vec3 ro, in f16vec3 rd, out HitData data, inout float tmax)
{
	bool hit_anything = false;

    int stack_top = 0;
    uint16_t stack[14];
    stack[0] = uint16_t(0);

    while (stack_top > -1)
    {
		uint16_t current_index = stack[stack_top];
        stack_top--;

        BVHNode node = bvh_nodes[current_index];
        f16vec3 bmin = get_bmin(node);
        f16vec3 bmax = get_bmax(node);
		uint16_t first_child_or_tri = uint16_t(node.data1.w);
		uint16_t num_node_tris = uint16_t(node.data2.w);

        // Check if ray intersects root node
        f16vec2 intersection = intersect_aabb(ro, rd, bmin, bmax, float16_t(tmax));
        bool hit_aabb = intersection.x <= intersection.y;
        if (hit_aabb)
        {
            if (num_node_tris == 0u)
            {
                BVHNode node_left = bvh_nodes[first_child_or_tri];
                BVHNode node_right = bvh_nodes[first_child_or_tri + uint16_t(1)];

                f16vec2 left_int = intersect_aabb(ro, rd, get_bmin(node_left), get_bmax(node_left), float16_t(tmax));
                bool hit_left = left_int.x <= left_int.y;
                f16vec2 right_int = intersect_aabb(ro, rd, get_bmin(node_right), get_bmax(node_right), float16_t(tmax));
                bool hit_right = right_int.x <= right_int.y;

                if(hit_left)
                {
                    if(hit_right)
                    {
                        if(left_int.x < right_int.x)
                        {
                            stack_top++;
                            stack[stack_top] = first_child_or_tri + uint16_t(1);
                            stack_top++;
                            stack[stack_top] = first_child_or_tri;
                        }
                        else
                        {
                            stack_top++;
                            stack[stack_top] = first_child_or_tri;
                            stack_top++;
                            stack[stack_top] = first_child_or_tri + uint16_t(1);
                        }
                    }
                    else
                    {
                        stack_top++;
                        stack[stack_top] = first_child_or_tri;
                    }
                }
                else
                {
                    if(hit_right)
                    {
                        stack_top++;
                        stack[stack_top] = first_child_or_tri + uint16_t(1);
                    }
                }
            }

            // If leaf node, test against triangles of node
            for (uint16_t i = uint16_t(0); i < num_node_tris; i++)
            {
                HitData local_data;
                bool hit_tri = intersect_triangle(ro, rd, first_child_or_tri + i, local_data, tmax);
                if (hit_tri)
                {
                    hit_anything = true;
                    tmax = local_data.t;
                    data = local_data;
                }
            }
        }
    }

    return hit_anything;
}

bool intersect(vec3 ro, vec3 rd, out HitData result)
{
    bool hit_anything = false;
    float tmax = TMAX;

	for (uint i = 0; i < triangles.length(); i++)
	{
		if (intersect_triangle(ro, rd, i, result, tmax))
		{
			hit_anything = true;
			tmax = result.t;
		}
	}

//	hit_anything = intersect_bvh_stack(f16vec3(ro), f16vec3(rd), result, tmax);

	for(uint i = 0; i < spheres.length(); i++)
	{
		Sphere current_sphere = spheres[i];
		float16_t current_t = float16_t(intersect_sphere(ro, rd, current_sphere));
		if(current_t >= TMIN && current_t <= tmax)
		{
			tmax = current_t;
			hit_anything = true;
			result.t = current_t;
			result.normal = f16vec3((ro + rd * current_t - current_sphere.sphere_data.xyz) / current_sphere.sphere_data.w);
			result.mat_index = current_sphere.mat_index.x;
			result.object_index = i;
			result.object_type = uint8_t(1);
		}
	}

	return hit_anything;
}

vec3 oren_nayar_brdf(vec3 albedo, float roughness, vec3 wi, vec3 wo)
{
	float theta_i, phi_i;
	cartesian_to_spherical(wi, theta_i, phi_i);

	float theta_o, phi_o;
	cartesian_to_spherical(wo, theta_o, phi_o);

	float squared_roughness = roughness * roughness;
	float A = 1.0 - 0.5 * squared_roughness / (squared_roughness + 0.33);
	float B = 0.45 * squared_roughness / (squared_roughness + 0.09);
	float alpha = max(theta_i, theta_o);
	float beta = min(theta_i, theta_o);
	return (albedo / PI) * (A + B * max(0.0, cos(phi_i - phi_o)) * sin(alpha) * tan(beta));
}

float positive_characteristic_func(float value)
{
	return value > 0.0 ? 1.0 : 0.0;
}

vec3 importance_sample_trowbridge_reitz(vec3 wo, float alpha_ggx, inout uint rng_state, out vec3 wi)
{
	float alpha_squared = alpha_ggx * alpha_ggx;

	// Generate 2 random numbers for theta and phi, respectively
	vec2 e = rand_vec2(rng_state);

	// This is dot(wm, n) or dot(wm, wg)
	float theta = acos(sqrt((1.0 - e.x)/((alpha_squared - 1) * e.x + 1)));
	float phi = TWO_PI * e.y;

	// Generate the microfacet normal we are looking for
	float cos_theta = cos(theta);
	float sin_theta = sin(theta);
	vec3 wm = vec3(sin_theta * cos(phi), cos_theta, sin_theta * sin(phi));

	// Generate the incident direction by reflecting the outgoing by the microfacet normal
	wi = normalize(reflect(-wo, wm));

	return wm;
}

// Trowbridge-Reitz NDF (also knows as the GGX NDF)
// m - microfacet normal
// n - surface normal
// TODO: the NDF term is causing fireflies!
float trowbridge_reitz_NDF(vec3 wm, vec3 wg, float alpha_ggx)
{
	float wg_dot_wm = dot(wg, wm);
	float squared_alpha = max(EPSILON * 10, alpha_ggx * alpha_ggx);

	float denominator = (PI * pow(1.0 + wg_dot_wm * wg_dot_wm * (squared_alpha - 1.0), 2));

	float result = positive_characteristic_func(wg_dot_wm) * squared_alpha / denominator;
	return result;
}

// Lambda function for GGX used in the Smith shadowing-masking function
float trowbridge_reitz_lambda(vec3 dir, float alpha_ggx)
{
	float cos_theta = dir.y;
	float sin_theta_2 = max(0.0, 1.0 - cos_theta * cos_theta);
	float tan_theta = sqrt(sin_theta_2) / cos_theta;
	float a = 1.0 / (alpha_ggx * tan_theta);
	return -0.5 + 0.5 * sqrt(1.0 + 1.0 / (a*a));
}

// Smith joing shadowing-masking function (height correlated form)
float G2(vec3 wi, vec3 wo, vec3 wm, float alpha_ggx)
{
	float result = positive_characteristic_func(dot(wm, wo)) * positive_characteristic_func(dot(wm, wi));
	result /= (1.0 + trowbridge_reitz_lambda(wo, alpha_ggx) + trowbridge_reitz_lambda(wi, alpha_ggx));
	return result;
}

// Schlick's approximation for the Fresnel term
vec3 F(vec3 wm, vec3 wi, vec3 F0)
{
	return F0 + (vec3(1.0) - F0) * pow(1.0 - min(1.0, max(0.0, dot(wm, wi))), 5);
}

vec3 GGX_Smith_BRDF_non_IS(vec3 wo, vec3 wi, vec3 F0, float alpha_ggx)
{
	// n or wg is always up in tangent space
	vec3 wg = vec3(0.0, 1.0, 0.0);
	vec3 wm = normalize(wo + wi);

	vec3 result = F(wm, wi, F0) * G2(wi, wo, wm, alpha_ggx) * trowbridge_reitz_NDF(wm, wg, alpha_ggx);
	result /= max(EPSILON * 10, 4 * abs(dot(wg, wi)) * abs(dot(wg, wo)));
	return result;
}

vec3 GGX_Smith_BRDF(vec3 wo, vec3 wm, vec3 wi, vec3 F0, float alpha_ggx, inout uint rng_state)
{
	// n or wg is always up in tangent space
	vec3 wg = vec3(0.0, 1.0, 0.0);

	// The below results from importance sampling the GGX NDF and having some terms cancel out
	vec3 result = F(wm, wi, F0) * G2(wi, wo, wm, alpha_ggx) * abs(dot(wo, wm));
	result /= max(EPSILON * 10, abs(dot(wg, wo)) * abs(dot(wg, wm)));
	return result;
}

// Wick wi with basis around the normal
vec3 pick_wi(in vec3 wo, in Material mat, in HitData data, in bool using_NEE, out vec3 wm, out float cos_theta, out float pdf, inout uint rng_state)
{
	bool is_ggx = bool(IMPORTANCE_SAMPLE_GGX) && !using_NEE;
	if(mat.data2.w == -1.0 || mat.data2.w == 0.0 || mat.data2.w == 1.0 || (mat.data2.w == 2.0 && !is_ggx))
	{
		wm = vec3(0.0, 1.0, 0.0);
		vec3 wi = map_to_unit_hemisphere_cosine_weighted_criver(rand_vec2(rng_state), wm);
		cos_theta = dot(wm, wi);
		pdf = cos_theta / PI;
		return wi;
	}

	if(mat.data2.w == 2.0 && is_ggx)
	{
		cos_theta = 1.0;
		pdf = 1.0;

		float alpha_ggx = mat.data1.w;

		vec3 wi;
		wm = importance_sample_trowbridge_reitz(wo, alpha_ggx, rng_state, wi);
		return wi;
	}

	// ERROR: material not handled!
	return vec3(1.0 / 0.0);
}

vec3 calc_BRDF(in vec3 wo, in vec3 wm, in vec3 wi, in Material mat, in vec2 uvs, in bool using_NEE, inout uint rng_state)
{
	vec3 brdf = vec3(1.0, 1.0, 0.0);

	int mat_type = int(mat.data2.w);
	vec3 albedo = mat.data1.xyz;
	vec3 F0 = mat.data2.xyz;

	vec3 diffuse_texture = texture(u_textures, vec3(uvs, mat.data3.w)).xyz;
	if(mat.data3.w > -1.0)
	{
		albedo *= diffuse_texture;
	}

	// Light source
	if(mat_type == -1)
	{
		brdf = vec3(0.0);
	}

	// Oren-Nayar diffuse BRDF
	if(mat_type == 1)
	{
		brdf = oren_nayar_brdf(albedo, mat.data1.w, wi, wo);
	}

	// Lambertian diffuse BRDF
	if (mat_type == 0)
	{
		brdf = albedo / PI;
	}

	// Specular BRDF
	if (mat_type == 2)
	{
		// TODO: use separate specular texture index
		if(mat.data3.w > -1)
		{
			F0 *= diffuse_texture;
		}

		if(bool(IMPORTANCE_SAMPLE_GGX) && !using_NEE)
		{
			brdf = GGX_Smith_BRDF(wo, wm, wi, F0, mat.data1.w, rng_state);
		}
		else
		{
			brdf = GGX_Smith_BRDF_non_IS(wo, wi, F0, mat.data1.w);
		}
	}

	return brdf;
}

// Estimators

vec3 estimator_path_tracing_BRDF(in vec3 ro, in vec3 rd, in uint rng_state)
{
	vec3 color = vec3(0.0);

	// ( BRDF * dot(Nx, psi) ) / PDF(psi)
	vec3 throughput_term = vec3(1.0);

	// Vignette effect (basically undoing We=1/cos^3(theta) )
	// float theta = acos(-rd.z);
	// throughput_term = throughput_term * pow(cos(theta), 3);

	for (uint b = 0; b < u_frame_data.z; b++)
	{
		HitData data;
		if(!intersect(ro, rd, data)) // ray goes off into infinity
		{
			color += throughput_term * sky_color(rd) * ENVIRONMENT_MAP_LE;
			return color;
		}

		Material mat = materials[data.mat_index];

		// Generate TNB matrix to map directions in terms of the normal vector
		mat3 tnb = transpose(construct_tnb(data.normal));
		mat3 inverse_tnb = inverse(tnb);

		// add the light that the material emits
		color += throughput_term * mat.data3.xyz;

		// Intersection point and new ray
		ro = ro + (rd * data.t) + (NORMAL_OFFSET * data.normal);

		// These get set by pick_wi
		float pdf, cos_theta; vec3 wm;

		vec3 wo = normalize(tnb * -rd);
		vec3 wi = pick_wi(wo, mat, data, false, wm, cos_theta, pdf, rng_state);
		rd = normalize(inverse_tnb * wi);

		vec3 BRDF = calc_BRDF(wo, wm, wi, mat, data.uvs, false, rng_state);

		// update throughput
		throughput_term *= cos_theta * BRDF / pdf;
	}

	return color;
}

float area_triangle(vec3 v0, vec3 v1, vec3 v2)
{
	vec3 edge1 = v1 - v0;
	vec3 edge2 = v2 - v0;
	return sqrt(dot(edge1, edge1) * dot(edge2, edge2)) * 0.5;
}

float area_sphere(float r)
{
	return 4.0 * PI * r * r;
}

vec3 map_to_triangle(vec2 vec, vec3 v0, vec3 v1, vec3 v2)
{
	float u = vec.x;
	float v = vec.y;

	if (u + v > 1.0)
	{
		// The generated point is outside triangle but
		// within the parallelogram defined by the 2 edges
		// of the triangle (v1-v0 and v2-v0)
		u = 1.0 - u;
		v = 1.0 - v;
	}

	vec3 p = u * (v1 - v0) + v * (v2 - v0);
	return p + v0;
}

vec3 estimator_path_tracing_nee(in vec3 ro, in vec3 rd, in uint rng_state)
{
	vec3 color = vec3(0.0);
	vec3 throughput_term = vec3(1.0);

	bool prev_bounce_specular = false;

	for (uint bounce = 0; bounce < u_frame_data.z; bounce++)
	{
		HitData data;
		if (!intersect(ro, rd, data))
		{
			// No intersection with scene, add env map contribution
			color += throughput_term * sky_color(rd) * ENVIRONMENT_MAP_LE;
			return color;
		}

		// Generate TNB matrix to map directions in terms of the normal vector
		mat3 tnb = transpose(construct_tnb(data.normal));
		mat3 inverse_tnb = inverse(tnb);

		vec3 wo = normalize(tnb * -rd);

		Material mat = materials[data.mat_index];

		uint num_light_sources = light_tri_indices.length() + light_sphere_indices.length();
		bool can_use_NEE = num_light_sources > 0;
		can_use_NEE = can_use_NEE && (mat.data2.w == 0.0 || mat.data2.w == 1.0 || (mat.data2.w == 2.0 && mat.data1.w * mat.data1.w > NEE_SPECULAR_ROUGHNESS_CUTOFF));

		// add light that is emitted from surface (but stop right afterwards)
		if (mat.data2.w == -1.0)
		{
			if(bounce == 0 || (bounce > 0 && prev_bounce_specular))
				color += throughput_term * mat.data3.xyz;

			return color;
		}
		// If there is at least 1 light source in the scene and the material
		// of the surface we hit is diffuse, we can use NEE.
		else if (can_use_NEE)
		{
			// sample light sources for direct illumination
			vec3 direct_illumination = vec3(0.0);
			for (uint shadow_ray_index = 0; shadow_ray_index < NUM_SHADOW_RAYS; shadow_ray_index++)
			{
				// pick a light source
				float pdf_pick_light = 1.0 / float(num_light_sources);

				int picked_light_source = int((pcg(rng_state) % num_light_sources));

				float light_area = 0.0;
				vec3 y = vec3(0.0);
				Material light_source_mat;

				// Triangle light source
				if (light_tri_indices.length() > 0 && picked_light_source < light_tri_indices.length())
				{
					Triangle light_source = triangles[light_tri_indices[picked_light_source]];
					light_area = area_triangle(light_source.data1.xyz, light_source.data2.xyz, light_source.data3.xyz);

					light_source_mat = materials[uint(light_source.data1.w)];

					y = map_to_triangle(rand_vec2(rng_state), light_source.data1.xyz, light_source.data2.xyz, light_source.data3.xyz);
				}
				// Sphere light source
				else if (light_sphere_indices.length() > 0)
				{
					Sphere light_source = spheres[light_sphere_indices[picked_light_source - light_tri_indices.length()]];

					float radius = light_source.sphere_data.w;
					light_area = area_sphere(radius);

					light_source_mat = materials[uint(light_source.mat_index.x)];

					// get a random point on unit sphere, scale the sphere up/down according
					// to the light source's radius, and move the point relative to the light 
					// source's spherical origin.
					y = map_to_unit_sphere(rand_vec2(rng_state)) * radius + light_source.sphere_data.xyz;
				}

				float pdf_pick_point_on_light = 1.0 / light_area;

				// PDF in terms of area, for picking point on light source k
				float pdf_light_area = pdf_pick_light * pdf_pick_point_on_light;

				// Send out a shadow ray in direction x->y
				vec3 shadow_ro = ro + rd * data.t + NORMAL_OFFSET * data.normal;
				vec3 dist_vec = y - shadow_ro;
				vec3 shadow_rd = normalize(dist_vec);

				// Check if ray hits anything before hitting the light source
				HitData shadow_data;
				bool shadow_hit_anything = intersect(shadow_ro, shadow_rd, shadow_data);

				// Visibility check means we have a clear line of sight!
				vec3 shadow_ray_hit = shadow_ro + shadow_rd * shadow_data.t;
				if (shadow_hit_anything && all(lessThanEqual(abs(y - shadow_ray_hit), vec3(EPSILON))))
				{
					vec3 wi = normalize(tnb * shadow_rd);
					vec3 wm = normalize(tnb * data.normal);

					vec3 BRDF = calc_BRDF(wo, wm, wi, mat, data.uvs, true, rng_state);

					// We want to only add light contribution from lights within
					// the hemisphere solid angle above X, and not from lights behind it.
					float cos_theta_x = max(0.0, dot(data.normal, shadow_rd));

					// We can sample the light from both sides, it doesn't have to
					// be a one-sided light source.
					float cos_theta_y = max(0.0, dot(shadow_data.normal, -shadow_rd));

					float squared_dist = dot(dist_vec, dist_vec);
					float G = cos_theta_x * cos_theta_y / squared_dist;

					direct_illumination += light_source_mat.data3.xyz * BRDF * G / pdf_light_area;
				}
			}
			direct_illumination /= float(NUM_SHADOW_RAYS);

			// Because we are calculating for a non-emissive point, we can safely
			// add the direct illumination to this point.
			color += throughput_term * direct_illumination;
		}

		vec3 old_rd = rd;
		ro += rd * data.t + NORMAL_OFFSET * data.normal;

		vec3 wm; float cos_theta_x, pdf;
		vec3 wi = pick_wi(wo, mat, data, true, wm, cos_theta_x, pdf, rng_state);
		rd = normalize(inverse_tnb * wi);

		vec3 BRDF = calc_BRDF(wo, wm, wi, mat, data.uvs, true, rng_state);
		if(mat.data2.w == 2.0 && mat.data1.w * mat.data1.w <= NEE_SPECULAR_ROUGHNESS_CUTOFF)
			prev_bounce_specular = true;
		else
			prev_bounce_specular = false;

		// Update the throughput term
		throughput_term *= BRDF * cos_theta_x / pdf;
	}

	return color;
}

float balance_heuristic(float pdf_a, float pdf_b)
{
	return pdf_a / (pdf_a + pdf_b);
}

vec3 estimator_path_tracing_mis(in vec3 ro, in vec3 rd, in uint rng_state)
{
	vec3 color = vec3(0.0);
	vec3 throughput_term = vec3(1.0);

	HitData data;
	bool hit_anything = intersect(ro, rd, data);
	if (!hit_anything)
	{
		// No intersection with scene, add env map contribution
		return sky_color(rd) * ENVIRONMENT_MAP_LE;
	}

	vec3 y = ro + rd * data.t + NORMAL_OFFSET * data.normal;
	vec3 normal_y = data.normal;
	Material mat_y = materials[data.mat_index];

	bool prev_bounce_specular = false;

	// Add light contribution from first bounce if it hit a light source
	color += mat_y.data3.xyz;

	uint num_light_sources = light_tri_indices.length() + light_sphere_indices.length();

	uint num_bounces = u_frame_data.z + 1;
	for (uint b = 1; b < num_bounces; b++)
	{
		vec3 x = y;
		vec3 normal_x = normal_y;
		Material mat_x = mat_y;
		float alpha_squared = mat_x.data1.w * mat_x.data1.w;

		// Generate TNB matrix to map directions in terms of the normal vector
		mat3 tnb = transpose(construct_tnb(normal_x));
		mat3 inverse_tnb = inverse(tnb);

		vec3 wo = normalize(tnb * -rd);

		// If there is at least 1 light source in the scene, and the material of the
		// surface is diffuse, we can calculate the direct light contribution (NEE)
		bool can_use_NEE = num_light_sources > 0;
		can_use_NEE = can_use_NEE && (mat_x.data2.w == 0.0 || mat_x.data2.w == 1.0 || (mat_x.data2.w == 2.0 && alpha_squared > NEE_SPECULAR_ROUGHNESS_CUTOFF));

		if (can_use_NEE)
		{
			// sample light sources for direct illumination
			vec3 direct_illumination = vec3(0.0);
			for (uint shadow_ray_index = 0; shadow_ray_index < NUM_SHADOW_RAYS; shadow_ray_index++)
			{
				// pick a light source
				float pdf_pick_light = 1.0 / float(num_light_sources);

				int picked_light_source = int((pcg(rng_state) % num_light_sources));

				float light_area = 0.0;
				vec3 y_nee = vec3(0.0);
				Material light_source_mat;

				// Triangle light source
				if(light_tri_indices.length() > 0 && picked_light_source < light_tri_indices.length())
				{
					Triangle light_source = triangles[light_tri_indices[picked_light_source]];
					light_area = area_triangle(light_source.data1.xyz, light_source.data2.xyz, light_source.data3.xyz);

					light_source_mat = materials[uint(light_source.data1.w)];

					y_nee = map_to_triangle(rand_vec2(rng_state), light_source.data1.xyz, light_source.data2.xyz, light_source.data3.xyz);
				}
				// Sphere light source
				else if(light_sphere_indices.length() > 0)
				{
					Sphere light_source = spheres[light_sphere_indices[picked_light_source - light_tri_indices.length()]];

					float radius = light_source.sphere_data.w;
					light_area = area_sphere(radius);

					light_source_mat = materials[uint(light_source.mat_index.x)];

					// get a random point on unit sphere, scale the sphere up/down according
					// to the light source's radius, and move the point relative to the light
					// source's spherical origin.
					y_nee = map_to_unit_sphere(rand_vec2(rng_state)) * radius + light_source.sphere_data.xyz;
				}

				// Send out a shadow ray in direction x->y
				vec3 dist_vec = y_nee - x;
				vec3 shadow_rd = normalize(dist_vec);
				vec3 shadow_ro = x;

				float squared_dist = dot(dist_vec, dist_vec);

				// We want to only add light contribution from lights within
				// the hemisphere solid angle above X, and not from lights behind it.
				float cos_theta_x = max(0.0, dot(normal_x, shadow_rd));

				// Check if ray hits anything before hitting the light source
				HitData shadow_data;
				bool shadow_hit_anything = intersect(shadow_ro, shadow_rd, shadow_data);

				// Visibility check means we have a clear line of sight!
				if (shadow_hit_anything && all(lessThan(y_nee - (shadow_ro + shadow_rd * shadow_data.t), vec3(EPSILON))))
				{
					vec3 wi = normalize(tnb * shadow_rd);
					vec3 wm = normalize(tnb * data.normal);

					vec3 BRDF = calc_BRDF(wo, wm, wi, mat_x, data.uvs, true, rng_state);

					float cos_theta_y = dot(shadow_data.normal, -shadow_rd);
					if (cos_theta_y > 0.0)
					{
						float pdf_pick_point_on_light = 1.0 / light_area;

						// PDF in terms of area, for picking point on light source k
						float pdf_light_area = pdf_pick_light * pdf_pick_point_on_light;

						// PDF in terms of solid angle, for picking point on light source k
						float pdf_NEE_sa = pdf_light_area * squared_dist / cos_theta_y;

						// PDF in terms of solid angle, for picking ray from cos. weighted hemisphere
						// NOTE: We do not use importance sampling for GGX here because we are
						// importance sampling only the light sources.
						float pdf_BSDF_sa = cos_theta_x / PI;

						// weight for NEE
						float wNEE = balance_heuristic(pdf_NEE_sa, pdf_BSDF_sa);

						direct_illumination += light_source_mat.data3.xyz * BRDF * cos_theta_x * wNEE / pdf_NEE_sa;
					}
				}
			}
			direct_illumination /= float(NUM_SHADOW_RAYS);

			color += throughput_term * direct_illumination;
		}

		ro = x + NORMAL_OFFSET * normal_x;

		// Pick a new direction
		vec3 old_rd = rd;
		float cos_theta_x, pdf_BSDF_sa; vec3 wm;
		vec3 wi = pick_wi(wo, mat_x, data, false, wm, cos_theta_x, pdf_BSDF_sa, rng_state);
		rd = normalize(inverse_tnb * wi);

		vec3 BRDF = calc_BRDF(wo, wm, wi, mat_x, data.uvs, false, rng_state);
		if(mat_x.data2.w == 2.0 && !can_use_NEE)
			prev_bounce_specular = true;
		else
			prev_bounce_specular = false;

		hit_anything = intersect(ro, rd, data);
		if (!hit_anything)
		{
			// No intersection with scene, add env map contribution
			color += ENVIRONMENT_MAP_LE * throughput_term * BRDF * cos_theta_x * sky_color(rd) / pdf_BSDF_sa;

			return color;
		}

		float cos_theta_y = dot(data.normal, -rd);
		normal_y = data.normal;

		y = ro + rd * data.t + NORMAL_OFFSET * normal_y;
		mat_y = materials[data.mat_index];

		// If we can use NEE on the hit surface
		float wBSDF = 1.0;
		if (can_use_NEE && cos_theta_y > 0.0)
		{
			// If the hit surface is a light source, we need to calculate the pdf for NEE
			if (mat_y.data2.w == -1.0)
			{
				float pdf_NEE_area = 0.0;

				// Triangle light source
				if (data.object_type == uint8_t(0))
				{
					Triangle tri_NEE = triangles[data.object_index];
					pdf_NEE_area = 1.0 / area_triangle(tri_NEE.data1.xyz, tri_NEE.data2.xyz, tri_NEE.data3.xyz);
				}
				// Sphere light source
				else if (data.object_type == uint8_t(1))
				{
					Sphere sphere_NEE = spheres[data.object_index];
					pdf_NEE_area = 1.0 / area_sphere(sphere_NEE.sphere_data.w);
				}

				pdf_NEE_area /= float(num_light_sources);

				float pdf_NEE_sa = pdf_NEE_area * data.t * data.t / cos_theta_y;
				wBSDF = balance_heuristic(pdf_BSDF_sa, pdf_NEE_sa);
			}

			color += throughput_term * BRDF * mat_y.data3.xyz * cos_theta_y * wBSDF / pdf_BSDF_sa;
		}

		throughput_term *= BRDF * cos_theta_x / pdf_BSDF_sa;

		if (!can_use_NEE)
		{
			if(mat_x.data2.w == 2.0 && bool(IMPORTANCE_SAMPLE_GGX))
			{
				color += throughput_term * mat_y.data3.xyz;
			}
		}
	}

	return color;
}

vec3 estimator_path_tracing_mis_REWORKED(in vec3 ro, in vec3 rd, in uint rng_state)
{
	return vec3(0.0, 0.0, 1.0);
}

vec3 render_function(vec2 screen_size, ivec2 pixel_coords, in uint rng_state)
{
	float grid_height = 2.0;
	float grid_width = grid_height * screen_size.x / screen_size.y;

	vec3 cam_up = normalize(cross(cam_right.xyz, cam_forward.xyz));
	vec3 grid_x = cam_right.xyz * grid_width;
	vec3 grid_y = cam_up * grid_height;

	vec3 grid_origin = cam_origin.xyz - (grid_x * 0.5) - (grid_y * 0.5);
	grid_origin += 2.0 * cam_forward.xyz;

	vec2 uv_offset = rand_vec2(rng_state) - vec2(0.5, 0.5);

	float u = (float(pixel_coords.x) + uv_offset.x) / screen_size.x;
	float v = (float(pixel_coords.y) + uv_offset.y) / screen_size.y;

	vec3 point_on_grid = grid_origin + u * grid_x + v * grid_y;
	vec3 ray_direction = normalize(point_on_grid - cam_origin.xyz);

	// TODO: separate into different shaders
//	return estimator_path_tracing_BRDF(cam_origin.xyz, ray_direction, rng_state);
//	return estimator_path_tracing_nee(cam_origin.xyz, ray_direction, rng_state);
	return estimator_path_tracing_mis(cam_origin.xyz, ray_direction, rng_state);
}

void main() 
{
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

	vec2 screen_size = imageSize(screen);

	uint rng_state = seed3(uvec3(pixel_coords, u_frame_data.x));

	vec3 color = render_function(screen_size, pixel_coords, rng_state);

	// weigh current frame according to accumulated past
	// frames and the current frame number
	vec4 last_frame = imageLoad(screen, pixel_coords);
	color = float(u_frame_data.y) / float(u_frame_data.y + 1) * last_frame.xyz + 1.0 / float(u_frame_data.y + 1) * color;

	imageStore(screen, pixel_coords, vec4(color, 1.0));
}